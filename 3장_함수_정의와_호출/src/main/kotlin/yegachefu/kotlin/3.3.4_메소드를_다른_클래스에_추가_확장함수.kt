/***
 * 확장 함수: 어떤 클래스의 멤버 메소드인 것처럼 호출할 수 있지만 그 클래스의 밖에 선언된 함수
 *
 * 확장 함수 용어
 *   - 객체 타입(receiver type): 확장 함수를 추가 시킬 클래스의 이름
 *   - 수신 객체(receiver object): 확장 함수가 호출되는 대상이 되는 값(객체), 객체 타입의 인스턴스
 *
 * 확장함수 만드는 법:
 *   fun 수신객체타입.확장함수이름(): 리턴타입 = 수신 객체를 이용하여 함수구현
 *   ex) fun String.lastChar() : Char = this.get(this.length - 1)
 *
 *  확장함수 특징:
 *    - 확장 함수 본문에서도 this 키워드를 사용할 수 있다 (일반 메소드처럼 생략도 가능)
 *    - 확장함수 내부에서 수신객체의 메소드나 프로퍼티를 바로 사용할 수 있다.
 *    - 확장 함수 안에서는 클래스 내부에서만 사용할 수 있는 비공개 멤버나 보호된 멤버를 사용할 수 없다. (캡슐화 훼손 X)
 *    - 확장함수는 임포트해야만 사용할 수 있다. (같은 이름의 확장 함수가 충돌할 수 있기 때문) - 코틀린에서 개별함수 임포트 가능
 *    - 확장함수는 오버라이드할 수 없다. (확장 함수는 클래스 밖에 선언되기 때문, 컴파일 시점에 정적으로 결정)
 *    - 멤버 함수와 확장 함수의 이름과 시그니처가 같을때 우선순위는 멤버 함수가 높다.
 *
 */
package yegachefu.kotlin

fun main() {
    val lastChar = "확장함수".lastChar()
    println("lastChar = ${lastChar}")
}

fun String.lastChar(): Char = this.get(this.length - 1)
